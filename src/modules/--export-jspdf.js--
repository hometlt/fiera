
//export amcharts with jspdf https://jsfiddle.net/henrikskar/mjpt2g7v/

// import svg2pdf from '../../plugins/svg2pdf/jsx/svg2pdf.js'
import {ImageNode,dataUriRegex} from "../../plugins/svg2pdf/jsx/nodes/image.js";
import { getAttribute } from  "../../plugins/svg2pdf/jsx/utils/node.js"
import jsPDF from "../../plugins/jspdf/src";

ImageNode.prototype.renderCore = async function(context) {
  if (!this.imageLoadingPromise) {
    return;
  }
  context.pdf.setCurrentTransformationMatrix(context.transform);
  const width = parseFloat(getAttribute(this.element, context.styleSheets, 'width') || '0'), height = parseFloat(getAttribute(this.element, context.styleSheets, 'height') || '0'), x = parseFloat(getAttribute(this.element, context.styleSheets, 'x') || '0'), y = parseFloat(getAttribute(this.element, context.styleSheets, 'y') || '0');
  if (!isFinite(width) || width <= 0 || !isFinite(height) || height <= 0) {
    return;
  }
  const { data, format } = await this.imageLoadingPromise;
  if (format.indexOf('svg') === 0) {
    const parser = new DOMParser();
    const svgElement = parser.parseFromString(data, 'image/svg+xml').firstElementChild;
    // unless preserveAspectRatio starts with "defer", the preserveAspectRatio attribute of the svg is ignored
    const preserveAspectRatio = this.element.getAttribute('preserveAspectRatio');
    if (!preserveAspectRatio ||
        preserveAspectRatio.indexOf('defer') < 0 ||
        !svgElement.getAttribute('preserveAspectRatio')) {
      svgElement.setAttribute('preserveAspectRatio', preserveAspectRatio || '');
    }
    svgElement.setAttribute('x', String(x));
    svgElement.setAttribute('y', String(y));
    svgElement.setAttribute('width', String(width));
    svgElement.setAttribute('height', String(height));
    const idMap = {};
    const svgnode = parse(svgElement, idMap);
    await svgnode.render(new Context(context.pdf, {
      refsHandler: new ReferencesHandler(idMap),
      styleSheets: context.styleSheets,
      viewport: new Viewport(width, height),
      svg2pdfParameters: context.svg2pdfParameters
    }));
    return;
  }
  else {

    try {
      if(data.constructor === String){
        const dataUri = `data:image/${format};base64,${btoa(data)}`;


        // will be ignored anyways if imageUrl is a data url
        context.pdf.addImage(dataUri, '', x, y, width, height);
      }
      else{
        context.pdf.addImage(data, '', x, y, width, height);
      }
    }
    catch (e) {
      typeof console === 'object' &&
      console.warn &&
      console.warn(`Could not load image ${this.imageUrl}.\n${e}`);
    }
  }
}

ImageNode.fetchImageData = async function fetchImageData(imageUrl) {

  if(fabric.resources[imageUrl]){
    let res = fabric.resources[imageUrl]
    return {
      data: res.buffer,
      format: "png" //todo
    };
  }

  for(let key in fabric.resources){
    if(fabric.resources[key].url === imageUrl){
      return {
        data: key,//fabric.resources[key].image,
        format: key.substring(key.lastIndexOf('.') + 1)
      };
    }
  }


  //todo this should be removed.
  // if(res){
  // 	let canvas = fabric.util.createCanvasElement();
  // 	canvas.width = res.image.width;
  // 	canvas.height = res.image.height;
  // 	let ctx = canvas.getContext('2d');
  // 	ctx.drawImage(res.image, 0, 0);
  // 	return canvas.toDataURL();
  //
  // }





  let data, format;
  const match = imageUrl.match(dataUriRegex);

  if (match) {
    const mimeType = match[2];
    const mimeTypeParts = mimeType.split('/');
    if (mimeTypeParts[0] !== 'image') {
      throw new Error(`Unsupported image URL: ${imageUrl}`);
    }
    format = mimeTypeParts[1];
    data = match[5];
    if (match[4] === 'base64') {
      data = atob(data);
    }
    else {
      data = decodeURIComponent(data);
    }
  }
  else {
    data = await ImageNode.fetchImage(imageUrl);
    format = imageUrl.substring(imageUrl.lastIndexOf('.') + 1);
  }
  return {
    data,
    format
  };
}

fabric.util.pdfDebug = false;
fabric.pdf = {
  setupSvgExport: function(){
    fabric.__exportPDF = true;
    this.__inlineSVG = fabric.inlineSVG;
    this.__rasterizeSvgShadow = fabric.Object.prototype.rasterizeSvgShadow;
    // fabric.inlineSVG = true;
    fabric.Object.prototype.rasterizeSvgShadow = true;
  },
  resolveSvgExport: function(){
    delete fabric.__exportPDF;
    fabric.inlineSVG = this.__inlineSVG;
    fabric.Object.prototype.rasterizeSvgShadow = this.__rasterizeSvgShadow;
  },
  defaultFontFamily: "Helvetica",
  svgOptions: {
    fontCallback(family, weight, style, fontOptions) {
      switch(weight) {
        case "normal":
          weight = 400;break;
        case "bold":
          weight = 700;break;
      }
      if (family.indexOf("'") !== -1) {
        family = family.substr(family.indexOf("'") + 1);
        family = family.substring(0, family.indexOf("'"));
      }
      let familyFull;

      let fv = fabric.fonts.getFontVariation(family, weight, style);



      if(fv){

        if(style === "italic" && fv.style === "normal"){
          fontOptions.fauxItalic = true;
        }
        if(weight > 400 && fv.weight <= 400){
          fontOptions.fauxBold = true;
        }


        familyFull = `${family} ${fv.style} ${fv.weight}`;
        if(!this._registeredFonts[familyFull]){
          fabric.util.pdfDebug && console.log(`PDF Register font: ${family} ${style} ${weight} `);
          if(fabric.isLikelyNode) {
            this.registerFont(familyFull, fv.variation.src);//,family
          }
          else{
            this.registerFont(familyFull, fv.variation.buffer);//,family
          }
        }
      }else{
        fabric.util.pdfDebug && console.warn(`PDF no font registered: ${family} `);
        familyFull = `Times ${style} ${weight}`;
      }
      return familyFull;
    },
    imageCallback(link) {
      let res;
      if(fabric.resources[link]){
        res = fabric.resources[link]
      }
      if(!res){
        for(let key in fabric.resources){
          if(fabric.resources[key].url === link){
            res = fabric.resources[key]
            break
          }
        }
      }
      //todo this should be removed.
      if(res){
        let canvas = fabric.util.createCanvasElement();
        canvas.width = res.image.width;
        canvas.height = res.image.height;
        let ctx = canvas.getContext('2d');
        ctx.drawImage(res.image, 0, 0);
        return canvas.toDataURL();
      }
      return link;
    }
    //- width, height [number] = initial viewport, by default it's the page dimensions
    //- preserveAspectRatio [string] = override alignment of the SVG content inside its viewport
    //- useCSS [boolean] = use the CSS styles computed by the browser (for SVGElement only)
    //- documentCallback [function] = same as above for the external SVG documents
    //- colorCallback [function] = function called to get color, making mapping to CMYK possible
    //- warningCallback [function] = function called when there is a warning
    //- assumePt [boolean] = assume that units are PDF points instead of SVG pixels
    //- precision [number] = precision factor for approximative calculations (default = 3)
  },
};

fabric.util.object.extend(fabric.Editor.prototype,{
  async makeDocumentJsPDF(){
    let svgArray = this.exportSVGData()

    let ptUnit = fabric.util.parseUnit("1pt");
    let size = editor.slides[0].getOriginalSize()

    var doc = new jsPDF({
      unit: 'mm',
      putOnlyUsedFonts: true,
      format: [size.width, size.height]
    })

    for (let pageNum = 0; pageNum < svgArray.length; pageNum++) {
      let slide = svgArray[pageNum]
      if (pageNum > 0) {
        doc.addPage({format: [slide.width / fabric.DPI, slide.height / fabric.DPI]});
      }
      doc.addSvg(slide, 0, 0, size.width, size.height);
    }
    return doc;
  }
});

fabric.util.object.extend(fabric.StaticCanvas.prototype,{
  makeDocument(){
    fabric.pdf.setupSvgExport();

    let ptUnit = fabric.util.parseUnit("1pt");
    let w = this.originalWidth || this.width;
    let h = this.originalHeight || this.height;
    const doc = new PDFDocument({compress: false, size : [
        w / ptUnit,//8.9 * 72,
        h / ptUnit // 12.3 * 72
      ]});
    fabric.pdf.svgOptions.assumePt = ptUnit;

    doc.svg(this.toSVG(), 0, 0,fabric.pdf.svgOptions);

    doc.end();

    fabric.pdf.resolveSvgExport();
    return doc;
  }
});
